import telebot
import random
import schedule
import record
import write
import locale
import players
from datetime import datetime
from telebot import types  # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
import settings

token = settings.KEY
chatid = settings.CHAT_ID
bot = telebot.TeleBot(token)
text = {}
date = {}
password = settings.PASS
locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')

#–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ, —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏–∑ –±–¥
def winner_post():
    c = record.connect()
    obj = c.all_select_date('data_lot')
    if obj is not None:
        for i in obj:
            my_dt = datetime.strptime(i, '%Y-%m-%d %H:%M:%S')
            current_time = datetime.now()
            if my_dt < current_time:
                get_link = c.get_link(i)
                get_users = players.connect.select_users(get_link[0])
                print(get_users)
                winner = random.sample(list(get_users.keys()), int(get_link[-1]))
                get_photo_db = c.get_photo('data_lot', i)
                get_post_id = c.get_post_id(i)
                if int(get_link[-1]) > 1:
                    win = '–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏'
                elif int(get_link[-1]) == 1:
                    win = '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å'
                #–í—ã–≤–æ–¥ –ø–æ—Å—Ç–∞ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è—Ö –≤ —Å—Ç–æ–ª–±–∏–∫ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
                caption = "\nüéâ–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞:\n{}:\n{}\n\n{}".format(win,"\n".join("{}. @<a href=\"tg://user?id={}\">{}</a>".format(winner.index(i)+1, i, get_users[i]) for i in winner), write.contact)
                bot.send_photo(chatid, get_photo_db, caption=caption, reply_to_message_id=get_post_id, parse_mode='html')
                #–ü–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –ø–æ—Å—Ç–∞ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø–æ id
                bot.edit_message_reply_markup(chatid, get_post_id, reply_markup=None)
                c.delete_date('data_lot', i)
        
#–∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–¥ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
def func_time():
    schedule.every().day.at("18:20").do(deffered_post)
    schedule.every().day.at("18:22").do(winner_post)
    #schedule.every(1).minutes.do(deffered_post)
    #schedule.every(2).minutes.do(winner_post)
    print('ok')
    while True:
        schedule.run_pending()


#–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –∏ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ
def deffered_post():
    global post_id
    c = record.connect()
    markup_participate = types.InlineKeyboardMarkup()
    participate = types.InlineKeyboardButton("–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å")
    markup_participate.add(participate)
    
    obj = c.all_select_date('data_public')
    if obj is not None:
        for i in obj:
            my_dt = datetime.strptime(i, '%Y-%m-%d %H:%M:%S')
            current_time = datetime.now()
            if my_dt < current_time:
                get_photo_db = c.get_photo('data_public', i)
                get_write = list(c.get_write(i))
                print(get_write, 'get_write')
                formatted_date = my_dt.strftime("%d %B –≤ %H:%M")
                print(formatted_date)
                post = bot.send_photo(chatid, get_photo_db, caption=f'{get_write[0]}\n\n{write.text_post}\n\n–ò—Ç–æ–≥–∏ –ø–æ–¥–≤–µ–¥—ë–º {formatted_date} –ø—Ä–∏ –ø–æ–º–æ—â–∏ –±–æ—Ç–∞, –æ–Ω —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.\n–í—Å–µ–º —É–¥–∞—á–∏ ü§ûüèº', reply_markup=markup_participate) #\n–î–∞—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:\n{c.get_write(i)[1]
                get_write.clear()
                post_id = post.id
                post_link = f'https://t.me/testtestaz/{post.id}'
                #–¥–æ–±–∞–≤–ª—è–µ–º id –ø–æ—Å—Ç–∞ –≤ –±–¥
                c.add_post_id(post_id, i)
                c.add_link(post_link, i)
                c.delete_date('data_public' ,i)


#–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=[f'start{password}', 'menu'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    menu = types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π", callback_data="–°–ø–∏—Å–æ–∫")
    new_lot = types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="–°–æ–∑–¥–∞—Ç—å")
    markup.add(menu, new_lot)
    if message.text == f'/start{password}':
        bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç—Å–≤—É–µ–º –≤–∞—Å, <b>{message.from_user.first_name}</b>\n" 
        "–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞", reply_markup=markup, parse_mode="HTML")
        print(datetime.now())
        func_time()
    elif message.text == '/menu':
        bot.send_message(message.chat.id, f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é", reply_markup=markup)


#–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(content_types=['photo'])
def get_photo(message):
    global photo_chat
    markup = types.InlineKeyboardMarkup()
    post = types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç", callback_data="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç")
    markup.add(post)
    bot.send_message(message.chat.id, text="–§–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, \n–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç?", reply_markup=markup)
    #–ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ id
    photo_chat = message.photo[-1].file_id


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ InlineKeyboardButton
@bot.callback_query_handler(func=lambda callback: True)
def handle_button_click(callback):
    c = record.connect()
    #–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
    if callback.data == '–°–ø–∏—Å–æ–∫':
        all_link = c.get_all_link()
        print(all_link)
        n = '\n'
        if all_link is not None and len(all_link)>0:
            bot.send_message(callback.message.chat.id, '–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤\n{}'.format('\n'.join(' - '.join([i[0], i[1][:20]]) for i in all_link)))
        else:
            bot.send_message(callback.message.chat.id, '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç')
        """ all_link = c.get_all_link()
        print(all_link)
        n = '\n'
        if all_link is not None and len(all_link)>0:
            bot.send_message(callback.message.chat.id, f'–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤\n{f"{n}".join(' - '.join([i[0], i[1][:20]]) for i in all_link)}')
        else:
            bot.send_message(callback.message.chat.id, '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç') """
    elif callback.data == '–°–æ–∑–¥–∞—Ç—å':
        msg = bot.send_message(callback.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞')
        bot.register_next_step_handler(msg, save_text)
    elif callback.data == '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç':
        select_table = list(c.select_table())
        print(select_table)
        my_dt = datetime.strptime(select_table[0][2], '%Y-%m-%d %H:%M:%S')
        formatted_date = my_dt.strftime("%d %B –≤ %H:%M")
        print(formatted_date, select_table[0][2])
        bot.send_photo(callback.message.chat.id, photo_chat, caption=f"{select_table[0][2]}\n\n{write.text_post}\n\n–ò—Ç–æ–≥–∏ –ø–æ–¥–≤–µ–¥—ë–º {formatted_date} –ø—Ä–∏ –ø–æ–º–æ—â–∏ –±–æ—Ç–∞, –æ–Ω —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.\n–í—Å–µ–º —É–¥–∞—á–∏ ü§ûüèº"
                       f"\n---------------\n–î–∞—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:\n{select_table[0][2]}")
        mes = bot.send_message(callback.message.chat.id, f'–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n2023-01-12 12:00:00\n{write.gmt}')
        #–¥–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø–æ id –∏ –¥–∞—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ –±–¥
        c.add_photo(photo_chat, select_table[0][2])
        print(select_table, 'selec_table')
        select_table.clear()
        bot.register_next_step_handler(mes, publish_by_time)
    elif callback.data == '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å':
        bot.send_message(callback.message.chat.id, f'–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ {c.select_date()}')
    elif callback.data == '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å':
        link = f'https://t.me/testtestaz/{callback.message.message_id}'
        id = callback.from_user.id
        all_users = list(players.connect.select_users(link).values())
        if callback.from_user.first_name in all_users or  callback.from_user.username in all_users:
            bot.answer_callback_query(callback.id, show_alert=True, text=f"–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(all_users)}")
        else:
            #–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞ –∫–∞–Ω–∞–ª –∏ –∑–∞–±–∏—Ä–∞–µ–º username, –µ—Å–ª–∏ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø–æ–ª—É—á–∞–µ–º  –∏–º—è –±–µ–∑ @—Å—Å—ã–ª–∫–∏ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞    
            member = bot.get_chat_member(chatid, id)
            if member.status == 'member' or member.status == 'creator' and member.status != 'bot':
                    if callback.from_user.username != None:
                        #–¥–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ —Å—Å—ã–ª–∫—É –≤ –±–¥
                        players.connect.add_player(id, callback.from_user.username, link)
                        bot.answer_callback_query(callback.id, show_alert=True, text=f"–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(all_users)+1}")
                    elif callback.from_user.username == None:
                        #–¥–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ —Å—Å—ã–ª–∫—É –≤ –±–¥
                        players.connect.add_player(id, callback.from_user.first_name, link)
                        bot.answer_callback_query(callback.id, show_alert=True, text=f"–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(all_users)+1}")
            else:
                bot.answer_callback_query(callback.id, show_alert=True, text="–î–ª—è —É—á–∞—Å—Ç–∏—è, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª")

#–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
def save_text(callback):
    global user_id
    user_id = callback.from_user.id
    text[user_id] = callback.text
    mes = bot.send_message(callback.chat.id, f'–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω \n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \n2023-01-12 12:00:00\n{write.gmt}')
    bot.register_next_step_handler(mes, date_lottery)

#–ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–æ–∑—ã–≥—Ä—ã—à–∞
def date_lottery(callback):
    global date_lottery_string
    date_lottery_string = callback.text
    date_format = '%Y-%m-%d %H:%M:%S'
        #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    try:
        datetime.strptime(date_lottery_string, date_format)
        date_post = callback.from_user.id
        date[date_lottery_string] = date_lottery_string
        mes = bot.send_message(callback.chat.id, '–î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π')
        bot.register_next_step_handler(mes, number_winners)

    #–∑–¥–µ—Å—å –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –≤—ã–∑—ã–≤–∞–µ–º —ç—Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é(—Ä–µ–∫—É—Ä—Å–∏—è)
    except ValueError:
        bot.send_message(callback.chat.id, f'–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\n2023-01-12 12:00:00\n{write.gmt}')
        bot.register_next_step_handler(callback, date_lottery)

#–ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞
def publish_by_time(mes):
    global date_string
    c = record.connect()
    markup = types.InlineKeyboardMarkup()
    publish = types.InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç", callback_data="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")
    markup.add(publish)
    date_string = mes.text
    date_format = '%Y-%m-%d %H:%M:%S'
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    try:
        datetime.strptime(date_string, date_format)
        date[date_string] = date_string
        bot.send_message(mes.chat.id, '–î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n'
            '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ —É–∫–∞–∑–∞–Ω—É—é –¥–∞—Ç—É –≤ –∫–∞–Ω–∞–ª–µ https://t.me/testtestaz ?', reply_markup=markup)
        #–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –¥–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        c.add_date(date[date_string])

    # –∑–¥–µ—Å—å –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –≤—ã–∑—ã–≤–∞–µ–º —ç—Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é(—Ä–µ–∫—É—Ä—Å–∏—è)
    except ValueError:
        bot.send_message(mes.chat.id, f'–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\n2023-01-12 12:00:00\n{write.gmt}')
        bot.register_next_step_handler(mes, publish_by_time)

#–ü–æ–ª—É—á–∞–µ–º –∫–æ–ª-–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç, –¥–∞—Ç—É —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –∫–æ–ª-–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ –±–¥
def number_winners(mes):
    global number
    c = record.connect()
    number = mes.text
    bot.send_message(mes.chat.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ')
    c.add_table(text[user_id], date[date_lottery_string], number)



bot.polling(none_stop=True)